{"version":3,"sources":["Cartoon.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","appElement","document","getElementById","Modal","setAppElement","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","openModal","chainsaw","bind","assertThisInitialized","closeModal","_this2","axios","get","then","response","message","data","setState","console","log","react_default","a","createElement","className","onClick","src","Cartoon","alt","lib_default","closeTimeoutMS","isOpen","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qTCMlCC,EAAaC,SAASC,eAAe,QAC3CC,IAAMC,cAAcJ,GAEpB,IA0DeK,cArDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAW,EACXC,SAAU,IAEZT,EAAKQ,UAAYR,EAAKQ,UAAUE,KAAfT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACjBA,EAAKY,WAAaZ,EAAKY,WAAWF,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAPDA,2EAUP,IAAAa,EAAAV,KACVW,IAAMC,IAd0C,0CAe7CC,KAAK,SAAAC,GAAY,IACRC,EAAYD,EAASE,KAArBD,QACRL,EAAKO,SAAS,CACZZ,WAAW,EACXC,SAAUS,2CAMhBf,KAAKiB,SAAS,CAAEZ,WAAW,IAC3Ba,QAAQC,IAAI,8CAIZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mEACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeC,QAASxB,KAAKK,WAC7Ce,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,IAASH,UAAU,gBAAgBI,IAAI,SAEnDP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CACEE,UAAU,gCACVM,eAAgB,IAChBC,OAAQ9B,KAAKI,MAAMC,WACnBe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,2CAChBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAASxB,KAAKS,YAAlD,MAEFW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kDACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mFACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,IAAd,IAAmBvB,KAAKI,MAAME,sBA3C5ByB,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAAShD,SAASC,eAAe,SD0H3C,kBAAmBgD,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.b4f12c91.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Cartoon.b825db6b.jpg\";","import React, { Component } from 'react';\nimport './App.css';\nimport Cartoon from './Cartoon.jpg';\nimport Modal from \"react-modal\";\nimport axios from 'axios';\n\nconst appElement = document.getElementById('root');\nModal.setAppElement(appElement);\n\nconst isDev = process.env.NODE_ENV !== 'production';\n//FOAAS\nconst FOAAS = isDev ? '/chainsaw/john/:Alexander' : 'https://foaas.com/chainsaw/:name/:from';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      openModal: false,\n      chainsaw: ''\n    };\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  openModal() {\n    axios.get(FOAAS)\n      .then(response => {\n        const { message } = response.data;\n        this.setState({\n          openModal: true,\n          chainsaw: message\n        })\n      })\n  }\n\n  closeModal() {\n    this.setState({ openModal: false });\n    console.log(\"jkghfgjhf\")\n  }\n\n  render() {\n    return (\n      <div className=\"d-flex justify-content-center align-items-center bg-dark vh-100\">\n        <button className=\"d-flex w-25 \" onClick={this.openModal}>\n          <img src={Cartoon} className=\"img-thumbnail\" alt=\"...\" />\n        </button>\n        <Modal\n          className=\"Modal__Bootstrap modal-dialog\"\n          closeTimeoutMS={150}\n          isOpen={this.state.openModal}>\n          <div className=\"modal-content bg-dark\">\n            <header className=\"d-flex justify-content-end modal-header\">\n              <button className=\"btn btn-default\" onClick={this.closeModal}>X</button>\n            </header>\n            <div className=\"d-flex justify-content-center h-100 modal-body\">\n              <main className=\"d-flex justify-content-center align-items-center vh-100 flex-grow-1 text-white \">\n                <h2 className=\"\"> {this.state.chainsaw}</h2>\n              </main>\n            </div>\n          </div>\n\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}